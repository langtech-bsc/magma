name: Enhanced Launch job

on:
  workflow_call:
    inputs:
      runs_on:
        required: false
        type: string
        default: magma-runner-set
      enable_tunnel:
        required: false
        type: boolean
        default: false

jobs:
  pre-job:
      runs-on: ${{inputs.runs_on}}
      outputs:
        job_name: ${{ steps.job_variables.outputs.job_name }}
        repo_branch: ${{ steps.job_variables.outputs.repo_branch }}
        job_path: ${{ steps.job_variables.outputs.job_path }}
        exists: ${{ steps.exists.outputs.exists }}

        tunnel_enable: ${{ steps.set_defaults.outputs.tunnel_enable }}
        jupyter_enable: ${{ steps.set_defaults.outputs.jupyter_enable }}
        jupyter_singularity: ${{ steps.set_defaults.outputs.jupyter_singularity }}
        tgi_enable: ${{ steps.set_defaults.outputs.tgi_enable }}
        tgi_singularity: ${{ steps.set_defaults.outputs.tgi_singularity }}
        tgi_model: ${{ steps.set_defaults.outputs.tgi_model }}
        singularity: ${{ steps.set_defaults.outputs.singularity }}
        default_singularity: ${{ steps.default_singularity.outputs.default_singularity }}

      steps:

      - name: Get job variables
        id: job_variables
        run: |
          JOB_REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}
          JOB_BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "job_name=${JOB_REPO_NAME}-${JOB_BRANCH}" >> $GITHUB_OUTPUT
          echo "repo_branch=${JOB_REPO_NAME}/${JOB_BRANCH}" >> $GITHUB_OUTPUT
          echo "job_path=/gpfs/scratch/${{ secrets.REMOTE_GROUP }}/${{ secrets.REMOTE_USER }}/jobs/${JOB_REPO_NAME}/${JOB_BRANCH}" >> $GITHUB_OUTPUT
          
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: check if job exists
        id: check_job
        uses: langtech-bsc/magma/actions/check-hpc-jobs@main
        with:
          job_name: ${{ steps.job_variables.outputs.job_name}}
          remote_user: ${{ secrets.REMOTE_USER}}
          remote_host: ${{ secrets.REMOTE_HOST}}

      - name: Job already exists
        if: ${{ steps.check_job.outputs.exists == 'true'}}
        id: exists
        run: |
            echo "The job is already running. Please note the limitation of one job per repository/branch. To proceed, you can either create another branch, cancel the current job, or wait for the job to finish."
            echo "Job already exists"
            echo "JOB IDs: ${{steps.check_job.outputs.jobs}}"
            echo "exists=true" >> $GITHUB_OUTPUT
            exit 1

      - uses: actions/checkout@v4

      - uses: actions-tools/yaml-outputs@8a3d95c649e970fbe0fb68b11e21a64a9b7bb1b0
        id: yaml
        with:
          export-env-variables: false
          file-path: './config.yaml'
          fail-on-file-not-found: false
          separator: '_'
        continue-on-error: true

      - name: Set default values if not set
        id: set_defaults
        env:
          DEFAULT_TUNNEL_ENABLE: "false"
          DEFAULT_JUPYTER_ENABLE: "false"
          DEFAULT_JUPYTER_SINGULARITY: "python-jupyter.sif"
          DEFAULT_TGI_ENABLE: "false"
          DEFAULT_TGI_SINGULARITY: "text-generation-inference.singularity.1.4.4.sif"
          DEFAULT_TGI_MODEL: "Mixtral-8x7B-Instruct-v0.1"
          CURRENT_REPO_BRANCH: "${{ steps.job_variables.outputs.repo_branch }}"
          
        run: |
          # Set default for tunnel.enable
          if [ -z "${{ steps.yaml.outputs.tunnel_enable }}" ]; then
            echo "tunnel_enable=${{ env.DEFAULT_TUNNEL_ENABLE }}" >> $GITHUB_OUTPUT
          else
            echo "tunnel_enable=${{ steps.yaml.outputs.tunnel_enable }}" >> $GITHUB_OUTPUT
          fi

          # Set default for jupyter.enable
          if [ -z "${{ steps.yaml.outputs.jupyter_enable }}" ]; then
            echo "jupyter_enable=${{ env.DEFAULT_JUPYTER_ENABLE }}" >> $GITHUB_OUTPUT
          else
            echo "jupyter_enable=${{ steps.yaml.outputs.jupyter_enable }}" >> $GITHUB_OUTPUT
          fi

          # Set default for jupyter.singularity
          if [ -z "${{ steps.yaml.outputs.jupyter_singularity }}" ]; then
            echo "jupyter_singularity=${{ env.DEFAULT_JUPYTER_SINGULARITY }}" >> $GITHUB_OUTPUT
          else
            echo "jupyter_singularity=${{ steps.yaml.outputs.jupyter_singularity }}" >> $GITHUB_OUTPUT
          fi

          # Set default for tgi.enable
          if [ -z "${{ steps.yaml.outputs.tgi_enable }}" ]; then
            echo "tgi_enable=${{ env.DEFAULT_TGI_ENABLE }}" >> $GITHUB_OUTPUT
          else
            echo "tgi_enable=${{ steps.yaml.outputs.tgi_enable }}" >> $GITHUB_OUTPUT
          fi

          # Set default for tgi.singularity
          if [ -z "${{ steps.yaml.outputs.tgi_singularity }}" ]; then
            echo "tgi_singularity=${{ env.DEFAULT_TGI_SINGULARITY }}" >> $GITHUB_OUTPUT
          else
            echo "tgi_singularity=${{ steps.yaml.outputs.tgi_singularity }}" >> $GITHUB_OUTPUT
          fi

          # Set default for tgi.model
          if [ -z "${{ steps.yaml.outputs.tgi_model }}" ]; then
            echo "tgi_model=${{ env.DEFAULT_TGI_MODEL }}" >> $GITHUB_OUTPUT
          else
            echo "tgi_model=${{ steps.yaml.outputs.tgi_model }}" >> $GITHUB_OUTPUT
          fi

          # Set default for singularity
          if [ -z "${{ steps.yaml.outputs.singularity }}" ]; then
            echo "singularity=${{ env.CURRENT_REPO_BRANCH }}" >> $GITHUB_OUTPUT
          else
            echo "singularity=${{ steps.yaml.outputs.singularity }}" >> $GITHUB_OUTPUT
          fi


      - name: Check if singularity image from current repo
        id: default_singularity
        run: |
          if [ "${{ steps.set_defaults.outputs.jupyter_singularity }}" = "${{ steps.job_variables.outputs.repo_branch }}" ] || \
            [ "${{ steps.set_defaults.outputs.tgi_singularity }}" = "${{ steps.job_variables.outputs.repo_branch }}" ] || \
            [ "${{ steps.set_defaults.outputs.singularity }}" = "${{ steps.job_variables.outputs.repo_branch }}" ]; then
             echo "default_singularity=true" >> $GITHUB_OUTPUT
          else
            echo "default_singularity=false" >> $GITHUB_OUTPUT
          fi
          
      
      - name: Output configuration
        run: |
          echo "job_name: ${{ steps.job_variables.outputs.job_name }}"
          echo "repo_branch: ${{ steps.job_variables.outputs.repo_branch }}"
          echo "job_path: ${{ steps.job_variables.outputs.job_path }}"
          echo ""
          echo "tunnel_enable: ${{ steps.set_defaults.outputs.tunnel_enable }}"
          echo "jupyter_enable: ${{ steps.set_defaults.outputs.jupyter_enable }}"
          echo "jupyter_singularity: ${{ steps.set_defaults.outputs.jupyter_singularity }}"
          echo "tgi_enable: ${{ steps.set_defaults.outputs.tgi_enable }}"
          echo "tgi_singularity: ${{ steps.set_defaults.outputs.tgi_singularity }}"
          echo "tgi_model: ${{ steps.set_defaults.outputs.tgi_model }}"
          echo "singularity: ${{ steps.set_defaults.outputs.singularity }}"
          echo "default_singularity: ${{ steps.default_singularity.outputs.default_singularity }}"
        
  launch-job:
      needs: pre-job
      uses: ./.github/workflows/launch_job.yml
      secrets: inherit
      with: 
        runs_on: ${{ inputs.runs_on }}
        job_path: ${{ needs.pre-job.outputs.job_path }}
        job_name: ${{ needs.pre-job.outputs.job_name }}
        enable_tunnel: ${{ needs.pre-job.outputs.tunnel_enable }}
        jupyter_enable: ${{ needs.pre-job.outputs.jupyter_enable }}
        jupyter_singularity: ${{ needs.pre-job.outputs.jupyter_singularity }}
        tgi_enable: ${{ needs.pre-job.outputs.tgi_enable }}
        tgi_singularity: ${{ needs.pre-job.outputs.tgi_singularity }}
        tgi_model: ${{ needs.pre-job.outputs.tgi_model }}
        singularity: ${{ needs.pre-job.outputs.singularity }}
        