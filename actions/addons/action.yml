name: Addons
description: "GitHub Action to modify sbatch with addons"
author: Ankush Raj <https://www.bsc.es/rana-ankush>

inputs:
  file:
    description: "File where the changes will be update"
    required: true
  
  jupyter:
    description: "Inject jupter"
    required: false
    default: false
  
  tgi:
    description: "Inject tgi"
    required: false
    default: false

  vllm:
    description: "Inject vllm"
    required: false
    default: false

  finetune:
    description: "Inject finetune"
    required: false
    default: false

  finetune_params:
    description: "Paremeters for finetuning sepearated by #"
    required: false
    default: ''

  harness_eval:
    description: "Inject harness eval"
    required: false
    default: false

  harness_eval_params:
    description: "Paremeters for harness eval sepearated by #"
    required: false
    default: ''

  sleep: 
    description: "Add sleep at the end of file"
    required: false
    default: false
  
  email: 
    description: "Email to add as #SBATCH directive"
    required: false
    default: "email-not-provided"
    
  slurm_command: 
    description: "A slurm command to add in the file"
    required: false
    default: ""

  job_path: 
    description: "Path where the job will launch"
    required: true
  
  

runs:
  using: "composite"
  steps:

    - name: Set globals
      id: globals
      shell: bash
      run: |
        echo "START_LINE=# --- IMPORTANT: DO NOT DELETE OR MODIFY THE FOLLOWING LINE ---" >> "${GITHUB_OUTPUT}"
        echo "LAST_LINE=# --- IMPORTANT: DO NOT DELETE OR MODIFY THE ABOVE LINE ---" >> "${GITHUB_OUTPUT}"

    - name: Check file
      shell: bash
      run: |
        if [ -f "${{inputs.file}}" ]; then
          echo '#SBATCH --chdir=${{inputs.job_path}}' >  file.tmp
          echo '#SBATCH --mail-user=${{inputs.email}}' >>  file.tmp
          echo '#SBATCH --mail-type=all' >>  file.tmp
          echo "" >> file.tmp
          echo "${{ steps.globals.outputs.START_LINE }}" >> file.tmp
        else
          echo "File '${{inputs.file}}' does not exist" && exit 1
        fi

    - name: Set requierd directives
      shell: bash
      run: |
        echo "" >> file.tmp
        cat ${{ github.action_path }}/directives.sh >> file.tmp
        echo "" >> file.tmp
        echo "Set directives done."

    - name: Set jupyter
      shell: bash
      if: ${{ inputs.jupyter == 'true' }}
      run: |
        echo "" >> file.tmp
        cat ${{ github.action_path }}/jupyter.sh >> file.tmp
        echo "" >> file.tmp
        echo "Set jupyter done."

    - name: Set tgi
      shell: bash
      if: ${{ inputs.tgi == 'true' }}
      run: |
        echo "" >> file.tmp
        cat ${{ github.action_path }}/tgi.sh >> file.tmp
        echo "" >> file.tmp
        echo "Set tgi done."

    - name: Set vllm
      shell: bash
      if: ${{ inputs.vllm == 'true' }}
      run: |
        echo "" >> file.tmp
        cat ${{ github.action_path }}/vllm.sh >> file.tmp
        echo "" >> file.tmp
        echo "Set vllm done."

  
    - name: Set Finetune
      shell: bash
      if: ${{ inputs.finetune == 'true' }}
      run: |
        echo "" >> file.tmp
        cat ${{ github.action_path }}/finetune.sh >> file.tmp

        sed -i "/%FINETUNE_PARAMS%/ {
          r /dev/stdin
          d
        }" file.tmp <<< $(echo "${{inputs.finetune_params}}" | tr '#' '\n' | awk '{print "    " $0 " \\"}')

        echo "" >> file.tmp
        echo "" >> file.tmp
        echo "Set Finetune done."

    - name: Set Harness eval
      shell: bash
      if: ${{ inputs.harness_eval == 'true' }}
      run: |
        echo "" >> file.tmp
        cat ${{ github.action_path }}/harness_eval.sh >> file.tmp

        sed -i "/%HARNESS_EVAL_PARAMS%/ {
          r /dev/stdin
          d
        }" file.tmp <<< $(echo "${{inputs.harness_eval_params}}" | tr '#' '\n' | awk '{print "    " $0 " \\"}')

        echo "" >> file.tmp
        echo "" >> file.tmp
        echo "Set Harness Eval done."
        
    - name: Set last line
      shell: bash
      run: |
        echo "${{ steps.globals.outputs.LAST_LINE }}" >> file.tmp
        echo "" >> file.tmp

    - name: Add slurm command line
      if: ${{ inputs.slurm_command != '' }}
      shell: bash
      run: |
        echo "" >> file.tmp
        echo '${{inputs.slurm_command}}' >> file.tmp
        echo "" >> file.tmp

    - name: Update file
      shell: bash
      run: |
        last_sbatch_line=$(grep -n '^#SBATCH' "${{inputs.file}}" | tail -1 | cut -d: -f1) # get last line number of #SBATCH
        
        # Split the original sbatch file into two parts
        head -n "$last_sbatch_line" "${{inputs.file}}" > temp_head.sh
        echo "" >> temp_head.sh
        tail -n +$((last_sbatch_line + 1)) "${{inputs.file}}" > temp_tail.sh

        cat temp_head.sh file.tmp temp_tail.sh > ${{inputs.file}}
        echo "File updated"

    - name: Set sleep line
      if: ${{ inputs.sleep == 'true' }}
      shell: bash
      run: |
        echo "" >> ${{inputs.file}}
        echo "${{ steps.globals.outputs.START_LINE }}" >> ${{inputs.file}}
        echo "" >> ${{inputs.file}}
        echo "echo Execute sleep" >> ${{inputs.file}}
        echo "sleep 30d" >> ${{inputs.file}}
        echo "" >> ${{inputs.file}}
        echo "${{ steps.globals.outputs.LAST_LINE }}" >> ${{inputs.file}}

    - name: Clean all
      shell: bash
      run: rm -rf temp_head.sh temp_tail.sh file.tmp



    
  
