name: Addons
description: "GitHub Action to modify sbatch with addons"
author: Ankush Raj <https://www.bsc.es/rana-ankush>

inputs:
  job:
    description: "File where the changes will be update"
    required: true
    default: 'build' # 'docker2tar' 'build' 'install'

  sandbox:
    description: "Where it's a singularity o sandbox"
    required: false
    default: false

  name:
    description: "Where it's a singularity o sandbox" # <branch_name>, signularity_image_name, not need to provide .sif, it will add automaticly.
    required: true

  remote_singularity_registry_path:
    description: "Path where the singularity, sandbox will be saved, requierd only for install option"
    required: false
    default: ''

  remote_tar_path:
    description: "Path where the tar file will be save, required only for build option"
    required: false
    default: ''

  remote_requirements_path:
    description: "Path where the requirements file will be save, required only for install option"
    required: false
    default: '' 

  remote_user:
    description: "Remote user"
    required: false
    default: '' 

  remote_host:
    description: "Remote host"
    required: false
    default: '' 

  local_dir:
    description: "File where to set changes"
    required: false
    default: 'src' 


runs:
  using: "composite"
  steps:
    - name: Set globals
      id: globals
      shell: bash
      run: |
        echo "SSH_OPTIONS=-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" >> "${GITHUB_OUTPUT}"
        echo "ENV_FILE=remote_job.env" >> "${GITHUB_OUTPUT}"
        echo "ENV_PREFIX=REMOTE_JOB" >> "${GITHUB_OUTPUT}"

    - name: Check job
      if: ${{ !contains(fromJson('["install", "build", "docker2tar"]'), inputs.job})}}
      shell: bash
      run: |
        echo 'Job must be one of ["install", "build", "docker2tar"]'
        exit 1

    - name: Pre steps on ["install", "build"]
      if: ${{ contains(fromJson('["install", "build"]'), inputs.job})}}
      shell: bash
      run: |
        rm -rf ${{ inputs.local_dir }}
        mkdir -p ${{ inputs.local_dir }}
        cp -r ${{ github.action_path }}/${{inputs.job}} ${{ inputs.local_dir }}
  
        echo "${{ steps.globals.outputs.ENV_PREFIX }}_NAME=${{inputs.name}}" >> "${{inputs.local_dir}}/${{ steps.globals.outputs.ENV_FILE }}"

    - name: On build
      if: ${{ contains(fromJson('["build"]'), inputs.job})}}
      shell: bash
      run: |
        if [ -z "${{inputs.remote_singularity_registry_path}}" ] || [ -z "${{inputs.remote_tar_path}}" ]; then
          echo "Required inputs remote_singularity_registry_path and remote_tar_path"
          exit 1
        fi

        echo "${{ steps.globals.outputs.ENV_PREFIX }}_PATH=${{inputs.remote_singularity_registry_path}}" > "${{inputs.local_dir}}/${{ steps.globals.outputs.ENV_FILE }}"
        echo "${{ steps.globals.outputs.ENV_PREFIX }}_DOCKER_TAR_PATH=${{inputs.remote_tar_path}}" >> "${{inputs.local_dir}}/${{ steps.globals.outputs.ENV_FILE }}"

    - name: On install
      if: ${{ contains(fromJson('["install"]'), inputs.job})}}
      shell: bash
      run: |
        if [ -z "${{inputs.remote_singularity_registry_path}}" ] || [ -z "${{inputs.remote_requirements_path}}" ]; then
          echo "Required inputs remote_singularity_registry_path and remote_requirements_path"
          exit 1
        fi

        echo "${{ steps.globals.outputs.ENV_PREFIX }}_PATH=${{inputs.remote_singularity_registry_path}}" > "${{inputs.local_dir}}/${{ steps.globals.outputs.ENV_FILE }}"
        echo "${{ steps.globals.outputs.ENV_PREFIX }}_REQUIREMENTS_PATH=${{inputs.remote_requirements_path}}" >> "${{inputs.local_dir}}/${{ steps.globals.outputs.ENV_FILE }}"
        echo "${{ steps.globals.outputs.ENV_PREFIX }}_SANDBOX=${{inputs.sandbox}}" >> "${{inputs.local_dir}}/${{ steps.globals.outputs.ENV_FILE }}"


    - name: Install and push requirements
      if: ${{ contains(fromJson('["install"]'), inputs.job})}}
      shell: bash
      run: |
        ssh ${{ steps.globals.outputs.SSH_OPTIONS }} ${{ inputs.remote_user }}@${{ inputs.remote_host }} 2>/dev/null "
          if [ -d \"${{ inputs.remote_singularity_registry_path }}/${{ inputs.name }}\" ]; then
            module load singularity
            if ! singularity inspect ${{ inputs.remote_singularity_registry_path }}/${{ inputs.name }} >/dev/null 2>&1; then
              echo 'The directory is not a Singularity sandbox'
              exit 1
            fi
          else
            echo 'The sandbox directory does not exist'
            exit 1
          fi
        "

        
        mkdir job_tmp_dir
        mv requirements.txt job_tmp_dir
        cd job_tmp_dir

        ssh ${{ steps.globals.outputs.SSH_OPTIONS }} ${{ inputs.remote_user }}@${{ inputs.remote_host }} 2>/dev/null "mkdir -p ${{ inputs.remote_requirements_path }}"
        ssh ${{ steps.globals.outputs.SSH_OPTIONS }} ${{ inputs.remote_user }}@${{ inputs.remote_host }} 2>/dev/null "module load singularity && singularity exec --contain -w --no-home  ${{ inputs.remote_singularity_registry_path }}/${{ inputs.name }} pip freeze" > freeze.txt
        python ${{ github.action_path }}/get_packages_list.py --packages ./requirements.txt --installed ./freeze.txt > toinstall.txt

        while IFS= read -r package; do
          pip download "$package"
          
          # Get the name of the downloaded package file (assuming only one file is downloaded)
          PACKAGE_FILE=$(ls *.whl *.tar.gz 2>/dev/null)
          
          # Check if the package file exists
          if [[ -f "$PACKAGE_FILE" ]]; then
              # Push the package to the host
              scp ${{ steps.globals.outputs.SSH_OPTIONS }} $PACKAGE_FILE ${{inputs.remote_user}}@${{inputs.remote_host}}:${{ inputs.remote_requirements_path }} 2>/dev/null

              
              # Clean up the downloaded package file
              rm "$PACKAGE_FILE"
          else
              echo "Error: Failed to download package '$package'"
              exit 1
          fi
        done < "$REQUIREMENTS_FILE"
        
        rm  toinstall.txt freeze.txt
        

    - name: Build docker image
      if: ${{ inputs.job == 'docker2tar' }}
      shell: bash
      run: |
        echo "Build docker"
        docker build . --no-cache -t user/${{inputs.name}}:latest

        echo "Save docker"
        docker save user/${{inputs.name}}:latest -o ${{inputs.name}}.tar 
        docker image rm user/${{inputs.name}}:latest
      
        echo "Push docker tar file"
        ssh ${{ steps.globals.outputs.SSH_OPTIONS }} ${{inputs.remote_user}}@${{inputs.remote_host}} 2>/dev/null "umask 007 && mkdir -p ${{inputs.remote_tar_path}}"

        echo "Pushing docker tar file"
        scp ${{ steps.globals.outputs.SSH_OPTIONS }} ${{inputs.name}}.tar ${{inputs.remote_user}}@${{inputs.remote_host}}:${{ inputs.remote_tar_path }} 2>/dev/null
        ssh ${{ steps.globals.outputs.SSH_OPTIONS }} ${{inputs.remote_user}}@${{inputs.remote_host}} 2>/dev/null "chmod 660 -r ${{ inputs.remote_tar_path }}/${{inputs.name}}.tar"
        rm ${{inputs.name}}.tar

        


        
        



    
  
